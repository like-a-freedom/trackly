name: trackly
services:
  db:
    container_name: trackly_db
    image: postgis/postgis:17-3.5-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trackly}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - trackly-internal
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  backend:
    container_name: trackly_backend
    restart: unless-stopped
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-trackly}
      RUST_LOG: info # production logging level
      MAX_HTTP_BODY_SIZE: ${MAX_HTTP_BODY_SIZE:-52428800}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-50331648}
      UPLOAD_RATE_LIMIT_SECONDS: ${UPLOAD_RATE_LIMIT_SECONDS:-10}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - trackly-internal
    # Only expose to reverse proxy, not to host
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  frontend:
    container_name: trackly_frontend
    restart: unless-stopped
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/Caddyfile:/etc/caddy/Caddyfile:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - trackly-internal
    security_opt:
      - no-new-privileges:true

networks:
  trackly-internal:
    driver: bridge
    internal: false

volumes:
  db_data:
    driver: local
